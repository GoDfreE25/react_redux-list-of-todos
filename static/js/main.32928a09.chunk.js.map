{"version":3,"sources":["store/types.ts","api/api.ts","store/actions.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","App.tsx","store/store.ts","index.tsx"],"names":["ActionType","request","url","fetch","then","response","json","selectUserIdAction","payload","type","SelectUserById","getTodosSeletor","state","todos","selectedUserIdSelector","selectUserById","getUserSelector","user","CurrentUser","dispatch","useDispatch","selectedUser","useSelector","selectedId","clearUser","useEffect","userId","data","LoadUserById","className","name","email","phone","onClick","TodoList","useState","query","setQuery","selectedOption","setSelectedOption","todosFS","AddTodos","filteredTodos","useMemo","filter","todo","title","toLowerCase","includes","completed","value","onChange","event","target","id","placeholder","map","checked","readOnly","App","React","memo","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32928a09.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\n\nexport interface State {\n  todos: Todo[],\n  selectUserById: number;\n  user: User | null;\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionType {\n  AddTodos = 'AddTodos',\n  SelectUserById = 'SelectUserById',\n  LoadUserById = 'LoadUserById',\n}\n\nexport type AddTodosAction = Action<ActionType.AddTodos, Todo[]>;\nexport type SelectUserIdAction = Action<ActionType.SelectUserById, number>;\nexport type LoadUserByIdAction = Action<ActionType.LoadUserById, User>;\n\nexport type Actions = AddTodosAction | SelectUserIdAction | LoadUserByIdAction;\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = () :Promise<Todo[]> => request('/todos/');\n\nexport const getUserById = (userId: number): Promise<User> => request(`/users/${userId}`);\n","import {\n  ActionType, AddTodosAction, LoadUserByIdAction, SelectUserIdAction,\n} from './types';\n\nexport const addTodosActionCreator = (payload: Todo[]): AddTodosAction => ({\n  type: ActionType.AddTodos,\n  payload,\n});\n\nexport const selectUserIdAction = (payload: number): SelectUserIdAction => ({\n  type: ActionType.SelectUserById,\n  payload,\n});\n\nexport const addUserAction = (payload: User): LoadUserByIdAction => ({\n  type: ActionType.LoadUserById,\n  payload,\n});\n","import { State } from './types';\n\nexport const getTodosSeletor = (state: State): Todo[] => state.todos;\nexport const selectedUserIdSelector = (state: State) => state.selectUserById;\nexport const getUserSelector = (state: State) => state.user;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserById } from '../../api/api';\nimport { addUserAction, selectUserIdAction } from '../../store/actions';\nimport { getUserSelector, selectedUserIdSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUser = useSelector(getUserSelector);\n  const selectedId = useSelector(selectedUserIdSelector);\n\n  const clearUser = () => dispatch(selectUserIdAction(0));\n\n  useEffect(() => {\n    getUserById(selectedId)\n      .then(data => dispatch(addUserAction(data)));\n  }, [selectedId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>Selected user:</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"TodoList__user-button button\"\n        onClick={() => clearUser}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, {\n  useState, useMemo, useEffect,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTodos } from '../../api/api';\nimport {\n  addTodosActionCreator, selectUserIdAction,\n} from '../../store/actions';\nimport { getTodosSeletor } from '../../store/selectors';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  const todos = useSelector(getTodosSeletor);\n  const dispatch = useDispatch();\n  const selectUserId = (id: number) => dispatch(selectUserIdAction(id));\n\n  useEffect(() => {\n    getTodos().then((todosFS) => dispatch(addTodosActionCreator(todosFS)));\n  }, []);\n\n  const filteredTodos = useMemo(() => (\n    todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ))\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return !todo.completed;\n          default:\n            return true;\n        }\n      })), [selectedOption, query, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n        id=\"search-query\"\n        className=\"TodoList_input\"\n        placeholder=\"Write the Title\"\n      />\n      <select\n        onChange={event => setSelectedOption(event.target.value)}\n        className=\"TodoList_section\"\n      >\n        <option value=\"all\">all</option>\n        <option value=\"active\">active</option>\n        <option value=\"completed\">completed</option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              className={`TodoList__item ${todo.completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className=\"TodoList__user-button button\"\n                type=\"button\"\n                onClick={() => selectUserId(todo.userId)}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList';\nimport './App.scss';\n\nexport const App: React.FC = React.memo(() => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { createStore, Reducer, Store } from 'redux';\nimport { Actions, ActionType, State } from './types';\n\nconst initialState: State = {\n  todos: [],\n  selectUserById: 0,\n  user: null,\n};\n\nconst reducer: Reducer<State, Actions> = (\n  state: State = initialState, action,\n): State => {\n  switch (action.type) {\n    case ActionType.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n    case ActionType.SelectUserById:\n      return {\n        ...state,\n        selectUserById: action.payload,\n      };\n    case ActionType.LoadUserById:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store: Store<State, Actions> = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store/store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}